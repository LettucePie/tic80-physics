# title:   object rotation demo ruby
# author:  thelettucepie@gmail.com @LettucePie
# desc:    Attempt to create rotating objects in Tic80
# site:    website link
# license: MIT License (change this to 
# version: 0.1
# script:  ruby


###
### Math Constants
###


PI = 3.14159265359


###
### Hash Key Constants
###


# Object Transform
POS = "position"
SCA = "scale"
ROT = "rotation"
TAG = "tags"
DRW = "draw"
# Drawable
DIM = "dimension"
TYP = "type"
CRC = "circle"
RCT = "rect"
SPR = "sprite"
FIL = "fill"
COLO = "color"
SHT = "sheet"
# Drawable Area
AREA = "area"
CEN = "center"
TLC = "topleftcorner"
TRC = "toprightcorner"
BLC = "bottomleftcorner"
BRC = "bottomrightcorner"


###
### Global Variables
###


$objects = []


###
### Object Creation
###


# Defines an Obj or Object
# All Obj have Position X and Y
# Scale Multiplier
# Tag Array
# Draw Instruction
def object(at_pos, sca, rot, tags, draw)
  return {
    POS => at_pos,
    SCA => sca,
    ROT => rot,
    TAG => tags,
    DRW => draw
    }
end


# Defines an Anim or Animation
# Label and Array of Sprite Coords
def anim()

end


# Defines a Sheet or SpriteSheet
# Compilation of multiple animations
# Useful for instructing multiple ...
# objects with the same anim command
def sheet()
  
end


# Defines params for basic circles
# and rects to be drawn.
def drawable_basic(
  type, dimension, fill, color)
 if type == CRC \
 or type == RCT then
   return{
   TYP => type,
   DIM => dimension,
   FIL => fill,
   COLO => color
    }
 end	
end


# Defines params for sprites to be
# drawn.
def drawable_spr(
  dimension, sheet, anim)
  trace("Nope")
end


###
### Tool Functions
###


def lerp1(a, b, l)
  return a + (b - a) * l.clamp(0, 1)
end


def lerp2(a, b, l)
  return [
    a[0] + (b[0] - a[0]) * l.clamp(0, 1),
    a[1] + (b[1] - a[1]) * l.clamp(0, 1)
  ]
end


def quad_bez(a, b, c, l)
	q0 = lerp2(a, b, l)
	q1 = lerp2(b, c, l)
	return lerp2(q0, q1, l)
end


def dir_to(a, b)
  return normalize(sub_vecs(b, a))
end


def add_vecs(a, b)
  return[
    a[0] + b[0],
    a[1] + b[1]
  ]
end


def sub_vecs(a, b)
  return add_vecs(a, scale_vec(b, -1.0))
end


def vec_mag(vec)
  return Math.sqrt(
    (vec[0] * vec[0])\
    +
    (vec[1] * vec[1])
  )
end


def normalize(vec)
  mag = vec_mag(vec)
  if mag > 0 then
    return [vec[0] / mag, vec[1] / mag]
  end
end


def multiply_vecs(a, b)
  return[
    a[0] * b[0],
    a[1] * b[1]
  ]
end


def scale_vec(vec, sca)
  return[
    vec[0] * sca,
    vec[1] * sca
  ]
end


def vec_rotated(vec, rot)
  sin = Math.sin(rot)
  cos = Math.cos(rot)
  return[
    vec[0] * cos - vec[1] * sin,
    vec[0] * sin + vec[1] * cos
  ]
end


def aabb(p1, d1, p2, d2)
  return (
    p1[0] < p2[0] + d2[0] and \
    p2[0] < p1[0] + d1[0] and \
    p1[1] < p2[1] + d2[1] and \
    p2[1] < p1[1] + d1[1]
  )	
end


def dist(a, b)
  v = sub_vecs(a, b)
  return Math.sqrt(
    (v[0] * v[0])\
    + 
    (v[1] * v[1])
  )
end


###
### Game Section
###


def BOOT
 # Create a Drawable Rectangle
 # with a wideness of 10 and
 # a height of 5. Set to be filled
 # with a color code of 3.
 object1_draw = drawable_basic(
   RCT, [10, 5], true, 3
 )
 # Do the Same, but with a Circle
 object2_draw = drawable_basic(
 		CRC, [10, 5], false, 5
 )
 # Create an object at position
 # 50x 50y, with a scale of 1
 # a rotation of 0 degrees,
 # a tag of just 'rectangle', 
 # and finally the drawable
 object1_obj = object(
   [50, 50], 1, 0.1, ["rectangle"], object1_draw
 )
 # Again instantiating the Circle Object
 object2_obj = object(
 		[120, 50], 1, 0.1, ["circle"], object2_draw
 )
 $objects<<(object1_obj)
 $objects<<(object2_obj)
end


def TIC
  cls()
  if $objects.size > 0 then
    $objects.each{ |obj|
    obj[SCA] = obj[SCA] + 0.01
    obj[ROT] = obj[ROT] + PI * 0.01
    if obj[SCA] >= 4 then
      obj[SCA] = 0.4
    end
    if obj[ROT] >= (PI * 2) then
      obj[ROT] = 0.0
    end
    }
    proc_draw()
  end
end


# Processes Drawing given data.
def proc_draw()
  $objects.each{ |obj|
    pos = obj[POS]
    draw = obj[DRW]
    area = dim_corners(obj[POS], draw[DIM], obj[ROT], obj[SCA])
    if draw[TYP] == CRC then
    	ring = dim_semi_crc(area[TLC], area[TRC], area[BLC], area[BRC])
     if draw[FIL] then
     	distance = dist(area[CEN], area[TLC])
     	(1..distance).each{ |p|
      	percent = p.to_f / distance.to_f
      	scaled = [
       	lerp2(area[CEN], area[TLC], percent),
        lerp2(area[CEN], area[TRC], percent),
        lerp2(area[CEN], area[BLC], percent),
        lerp2(area[CEN], area[BRC], percent)
       ]
     		ring += dim_ring(scaled[0], scaled[1], scaled[2], scaled[3])
      }
     end
    
   		ring.each{ |point|
     	pix(point[0], point[1], draw[COLO])
     }
    end
    if draw[TYP] == RCT then
    		if draw[FIL] then
      	area = dim_area(area)
      end
      area[AREA].each{ |point|
      	pix(point[0], point[1], draw[COLO])
      }
    end
  }
end


def dim_corners(center, dim, rot, sca)
		area = {}
		area[AREA] = []
		area[CEN] = center
  # Establish working Corners.
  top_right = dim
  top_left = [dim[0] * -1, dim[1]]
  # Scale primary corners by sca.
  top_right = scale_vec(top_right, sca)
  top_left = scale_vec(top_left, sca)
  # Rotate primary corners and flip
  # for opposing corners.
  top_right = vec_rotated(top_right, rot)
  bot_left = scale_vec(top_right, -1)
  top_left = vec_rotated(top_left, rot + (PI / 2))
  bot_right = scale_vec(top_left, -1)
  # Displace by center.
  top_right = add_vecs(top_right, center)
  top_left = add_vecs(top_left, center)
  bot_right = add_vecs(bot_right, center)
  bot_left = add_vecs(bot_left, center)
  # Draw corners.
  area[TRC] = top_right
  area[BLC] = bot_left
  area[TLC] = top_left
  area[BRC] = bot_right
  area[AREA] += [top_right, top_left,
   bot_right, bot_left]
  return area
end


def dim_ring(tlc, trc, blc, brc)
	up = lerp2(tlc, trc, 0.5)
 down = lerp2(blc, brc, 0.5)
 left = lerp2(blc, tlc, 0.5)
 right = lerp2(brc, trc, 0.5)
 reso = dist(blc, trc)
 top_left_arc = []
 top_right_arc = []
 bot_left_arc = []
 bot_right_arc = []
 (1..reso).each{ |p|
 	percent = p.to_f / reso.to_f
  top_left_arc<<quad_bez(left, tlc, up, percent)
  top_right_arc<<quad_bez(up, trc, right, percent)
  bot_right_arc<<quad_bez(right, brc, down, percent)
  bot_left_arc<<quad_bez(down, blc, left, percent)
 }
 return top_left_arc \
 	+ top_right_arc \
  + bot_left_arc \
  + bot_right_arc
end


def dim_semi_crc(tlc, trc, blc, brc)
	area = []
	up = lerp2(tlc, trc, 0.5)
 down = lerp2(blc, brc, 0.5)
 left = lerp2(blc, tlc, 0.5)
 right = lerp2(brc, trc, 0.5)
 center = lerp2(down, up, 0.5)
 vert_norm = dir_to(down, up)
 vert_vec = sub_vecs(up, down)
 vert_count = vec_mag(vert_vec).round
 hort_norm = dir_to(left, right)
 hort_norm_flipped = dir_to(right, left)
 v_point = down
 i = 0
 (1..vert_count).each{ |v|
 	h_point = v_point
  h_flip = h_point
  area<<h_point
  vert_journey = v.to_f / vert_count.to_f
  scaling_down = false
  a = down
  b = blc
  c = left
  if vert_journey >= 0.5 then
  	vert_journey -= 0.5
   scaling_down = true
  	a = left
   b = tlc
   c = up
  end
 	trace("Scaling Down : " + scaling_down.to_s)
  trace("V Value : " + v.to_s)
  trace("vert_count : " + vert_count.to_s)
  trace("Vertical Journey : " + vert_journey.to_s)
  hort_target = quad_bez(a, b, c, vert_journey / 0.5)
 	hort_vec = sub_vecs(hort_target, v_point)
 	hort_count = vec_mag(hort_vec).round
  if hort_count > 0 then
  	(1..hort_count).each{ |h|
   	h_point = add_vecs(h_point, hort_norm)
    h_flip = add_vecs(h_flip, hort_norm_flipped)
    area<<h_point
    area<<h_flip
   }
  end
  v_point = add_vecs(v_point, vert_norm)
  trace("Run " + i.to_s)
  trace("v_point " + v_point.to_s)
  trace("hort_target " + hort_target.to_s)
  trace("hort_vec " + hort_vec.to_s)
  trace("hort_count " + hort_count.to_s)
  i += 1
 }
 hort_vec = sub_vecs(right, left)
 hort_count = vec_mag(hort_vec).round
 reso = dist(blc, trc)
 return area
end


def dim_area(area)
  # Build Line Vectors
  tl_tr = sub_vecs(area[TRC], area[TLC])
  tl_tr_mag = vec_mag(tl_tr)
  tl_tr_dir = normalize(tl_tr)
  tl_bl = sub_vecs(area[BLC], area[TLC])
  tl_bl_mag = vec_mag(tl_bl)
  tl_bl_dir = normalize(tl_bl)
  # Draw Lines by iterating over
  # the magnitude of the edges of
  # the area. Traveling the normalized
  # direcion each time, then placing
  # a point.
  point = area[TLC]
  (2..tl_tr_mag).each{ |n|
    point = add_vecs(point, tl_tr_dir)
    area[AREA]<<point
    offset = add_vecs(point, tl_bl)
				area[AREA]<<offset
  }
  point = area[TLC]
  (2..tl_bl_mag).each{ |n|
    point = add_vecs(point, tl_bl_dir)
				area[AREA]<<point
    offset = add_vecs(point, tl_tr)
				area[AREA]<<offset
  }
  # Fill Area by iterating over
  # a grid made out of the two edge
  # magnitudes.
  reso_x = 2
  reso_y = 2
  sharp_x = scale_vec(tl_tr_dir, 0.5)
  sharp_y = scale_vec(tl_bl_dir, 0.5)
  point = area[TLC]
  offset = point
  (1..tl_bl_mag * reso_y).each{ |y|
    point = add_vecs(point, sharp_y)
    offset = point
    (1..tl_tr_mag * reso_x).each{ |x|
      offset = add_vecs(offset, sharp_x)
     	area[AREA]<<offset
    }     
  }
  return area
end
# <TILES>
# 001:eccccccccc888888caaaaaaaca888888cacccccccacc0ccccacc0ccccacc0ccc
# 002:ccccceee8888cceeaaaa0cee888a0ceeccca0ccc0cca0c0c0cca0c0c0cca0c0c
# 003:eccccccccc888888caaaaaaaca888888cacccccccacccccccacc0ccccacc0ccc
# 004:ccccceee8888cceeaaaa0cee888a0ceeccca0cccccca0c0c0cca0c0c0cca0c0c
# 017:cacccccccaaaaaaacaaacaaacaaaaccccaaaaaaac8888888cc000cccecccccec
# 018:ccca00ccaaaa0ccecaaa0ceeaaaa0ceeaaaa0cee8888ccee000cceeecccceeee
# 019:cacccccccaaaaaaacaaacaaacaaaaccccaaaaaaac8888888cc000cccecccccec
# 020:ccca00ccaaaa0ccecaaa0ceeaaaa0ceeaaaa0cee8888ccee000cceeecccceeee
# </TILES>

# <WAVES>
# 000:00000000ffffffff00000000ffffffff
# 001:0123456789abcdeffedcba9876543210
# 002:0123456789abcdef0123456789abcdef
# </WAVES>

# <SFX>
# 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
# </SFX>

# <TRACKS>
# 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# </TRACKS>

# <SCREEN>
# 095:000000000000000000000000000000000000000111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 096:000000000000000000000000000000000000011111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 097:000000000000000000000000000000000000111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 098:000000000000000000000000000000000001111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 099:000000000000000000000000000000000011111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 100:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 101:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 102:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 103:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 104:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 105:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 106:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 107:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 108:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 109:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 110:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 111:333333333333333333330000000000000011111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 112:333333333333333333330000000000000001111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 113:333333333333333333330000000000000000111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 114:333333333333333333330000000000000000011111111111005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 115:333333333333333333330000000000000000000111111100005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 116:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 117:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 118:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 119:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 120:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 121:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 122:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 123:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 124:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 125:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 126:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 127:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 128:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 129:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 130:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 131:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 132:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 133:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 134:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 135:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# </SCREEN>

# <PALETTE>
# 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
# </PALETTE>

