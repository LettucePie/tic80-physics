# title:   physics demo ruby
# author:  thelettucepie@gmail.com @LettucePie
# desc:    Attempt to create working physics in Tic80
# site:    website link
# license: MIT License (change this to 
# version: 0.1
# script:  ruby


###
### Hash Key Constants
###


# Object Transform
POS = "position"
SCA = "scale"
TAG = "tags"
DRW = "draw"
# Drawable
TYP = "type"
CRC = "circle"
RCT = "rect"
SPR = "sprite"
RAD = "radius"
COLO = "color"
SHT = "sheet"
#
# Physics
OBJ = "object"
SHP = "shape"
DIM = "dimension"
STC = "static"
MAS = "mass"
DIR = "direction"
VEL = "velocity"
RST = "resting"


###
### Global Variables
###


# Physical Objects
$phys = []
# Just Objects
$objects = []


###
### Object Creation
###


# Defines an Obj or Object
# All Obj have Position X and Y
# Scale Multiplier
# Tag Array
# Draw Instruction
def object(at_pos, sca, tags, draw)
	return {
		POS => at_pos,
		SCA => sca,
		TAG => tags,
		DRW => draw
		}
end


# Defines a Physics Shape for ...
# interersections and Vector Math
def shape(type, pos, dim, rad)
	if type == CRC then
		return {
			TYP => type,
			POS => [rad * -1.0, rad * -1.0],
			DIM => [rad * 2.0, rad * 2.0],
			RAD => rad
		}
	end
	return {
	TYP => type, POS => pos, 
	DIM => dim, RAD => rad
	}
end


# Defines an Anim or Animation
# Label and Array of Sprite Coords
def anim()

end


# Defines a Sheet or SpriteSheet
# Compilation of multiple animations
# Useful for instructing multiple ...
# objects with the same anim command
def sheet()
	
end


# Defines params for drawn entities
# First a type is set
# Sets are Circle, Rect, or Sprite
# For Cirle a Radius, Rect a W/H
# Sprite gets SpriteSheet
def drawn(type, extra)
	if type == CRC then
		return {TYP=> type,
		 RAD=> extra[0],
			COLO=> extra[1]}
	end
	if type == RCT then
		return {TYP=> type,
			DIM=> extra[0],
			COLO=> extra[1]}
	end
	if type == SPR then
		return {TYP=> type,
			SHT=> extra}
	end
end


def add_phys(
				obj, shp, pos, stc, 
				mass, dir, vel, rst
				)
	$phys<<{
		OBJ => obj, SHP => shp,
		POS => pos, STC => stc,
		MAS => mass,	DIR => dir,
		VEL => vel, RST => rst 
		}
end


###
### Tool Functions
###


def lerp1(a, b, l)
	return a + (b - a) * l.clamp(0, 1)
end


def lerp2(a, b, l)
	return [
		a[0] + (b[0] - a[0]) * l.clamp(0, 1),
		a[1] + (b[1] - a[1]) * l.clamp(0, 1)
	]
end


def dir_to(a, b)
	return normalize(sub_vecs(b, a))
end


def add_vecs(a, b)
	return[
		a[0] + b[0],
		a[1] + b[1]
	]
end


def sub_vecs(a, b)
	return add_vecs(a, scale_vec(b, -1.0))
end


def vec_mag(vec)
	return Math.sqrt(
		(vec[0] * vec[0])\
		+
		(vec[1] * vec[1])
	)
end


def normalize(vec)
	mag = vec_mag(vec)
	if mag > 0 then
		return [vec[0] / mag, vec[1] / mag]
	end
end


def multiply_vecs(a, b)
	return[
		a[0] * b[0],
		a[1] * b[1]
	]
end


def scale_vec(vec, sca)
	return[
		vec[0] * sca,
		vec[1] * sca
	]
end


def aabb(p1, d1, p2, d2)
	return (
		p1[0] < p2[0] + d2[0] and \
		p2[0] < p1[0] + d1[0] and \
		p1[1] < p2[1] + d2[1] and \
		p2[1] < p1[1] + d1[1]
	)	
end


def dist(a, b)
	v = sub_vecs(a, b)
	return Math.sqrt(
		(v[0] * v[0])\
		+ 
		(v[1] * v[1])
	)
end


## Expects [POS, RAD] [POS, SHP]
def col_crc_rec(crc, rec)
	rec_cen = rec[0]
	rec_div = scale_vec(rec[1][DIM], 0.5)
	if rec[1][POS] == [0, 0] then
		# Center it
		rec_cen = add_vecs(
			rec[0], rec_div
		)
	end
	clamped = crc[0]
	rec_min = sub_vecs(rec_cen, rec_div)
	rec_max = add_vecs(rec_cen, rec_div)
	clamped[0] = clamped[0].clamp(
		rec_cen[0] - rec_div[0],
		rec_cen[0] + rec_div[0]
	)
 clamped[1] = clamped[1].clamp(
		rec_cen[1] - rec_div[1],
		rec_cen[1] + rec_div[1]
	)
	distance = dist(crc[0], clamped)
	if distance <= crc[1] then
		return true
	else
		return false
	end
end


## Expects [POS, RAD] [POS, RAD]
def col_crc_crc(a, b)
	p = scale_vec(dir_to(a[0], b[0]), a[1])
	p = add_vecs(a[0], p)
	if dist(p, b[0]) <= b[1] then
		return true
	else
		return false
	end
end


###
### Game Section
###


def BOOT
	player_vis = drawn(
		CRC, [10, 1]
	)
	player_obj = object(
		[0, 0], 1, ["player"], player_vis
	)
	player_shp = shape(
		CRC, [0, 0], [0, 0], 10
	)
## Extra Object
	extra_vis = drawn(
		RCT, [[10, 10], 5]
	)
## Displace Object POS to Center
	extra_obj = object(
		[-5, 5], 1, ["extra"], extra_vis
	)
## Displace Shape POS as well.
	extra_shp = shape(
		RCT, [-5, 5], [10, 10], 0
	)
	floor_vis = drawn(
		RCT, [[240, 20], 2]
	)
	floor_obj = object(
		[0, 0], 1, ["terrain"], floor_vis
	)
	floor_shp = shape(
		RCT, [0, 0], [240, 20], 0
	)
	obstacle_vis = drawn(
		RCT, [[20, 40], 3]
	)
 obstacle_obj = object(
 	[0, 0], 1, ["terrain"], obstacle_vis
 )
 obstacle_shp = shape(
 	RCT, [0, 0], [20, 40], 0
 )
	add_phys(
		player_obj,
		player_shp,
		[29, -70], false,
		0.8, [0.0, 0.0], 
		0.0, false
	)
	add_phys(
		player_obj,
		player_shp,
		[50, -120], false,
		0.8, [0.0, 0.0], 
		0.0, false
	)
	add_phys(
		player_obj,
		player_shp,
		[20, -90], false,
		0.8, [0.0, 0.0], 
		0.0, false
	)
	add_phys(
		extra_obj,
		extra_shp,
		[55, -50], false,
		0.8, [0.0, 0.0],
		0.0, false
	)
	add_phys(
		extra_obj,
		extra_shp,
		[148, -100], false,
		0.8, [0.0, 0.0],
		0.0, false
	)
	add_phys(
		floor_obj,
		floor_shp,
		[0, 120], true,
		10, [0.0, 0.0],
		0.0, false
	)
	add_phys(
		obstacle_obj,
	 obstacle_shp,
		[0, 100], true,
		10, [0.0, 0.0],
		0.0, false
	)
end


def TIC
	cls()
	drawables = []
	if $phys.size > 0 then
		drawables.concat(proc_physics())
	end
	if $objects.size > 0 then
		$objects.each{
			|obj|
			drawables<<{
				POS => obj[POS],
				DRW => obj[DRW]
			}
		}
	end
	if drawables.size > 0 then
		proc_drawables(drawables)
	end
end


# Processes Physics Movement/Collision
def proc_physics()
	drawables = []
	$phys.each{
		|phys|
		if !phys[STC] and !phys[RST] then
			proc_coll(phys)
			# Gravity
			dir = phys[DIR]
			dir = lerp2(dir, [0, 1], 0.2)
			vel = phys[VEL]
			vel += 0.1
			move = scale_vec(
				dir, vel * phys[MAS]
			)
			phys[POS] = add_vecs(
				phys[POS], move
			)
			phys[DIR] = dir
			phys[VEL] = vel
			# Compare All potential collisions
			# NOTE This is dangerous.
			# Keep phys array small.
			proc_coll(phys)
		end
		# Create Visual Drawable
		pos = add_vecs(
			phys[POS], phys[OBJ][POS]
		)
		drawables<<{
			POS => pos,
			DRW => phys[OBJ][DRW]
		}
	}
	return drawables
end


def proc_coll(phys)
	$phys.each{
		|compare|
		shp_a = phys[SHP]
		shp_b = compare[SHP]
		pos_a = add_vecs(
			phys[POS], shp_a[POS]
		)
		pos_b = add_vecs(
			compare[POS], shp_b[POS]
		)
		dim_a = shp_a[DIM]
		dim_b = shp_b[DIM]
		if phys != compare \
		and aabb(pos_a, dim_a, pos_b, dim_b) 
		then
			col = true
			dir = [0, -1]
			vel = phys[VEL] / 2
			if shp_a[TYP] == CRC \
			and shp_b[TYP] == CRC then
				col = col_crc_crc(
					[pos_a, shp_a[RAD]],
					[pos_b, shp_b[RAD]]
				)
				if col then
					trace("Circle and Circle Collision: true")
				else
				
				end
			end
			if shp_a[TYP] == CRC \
			and shp_b[TYP] == RCT then
				col = col_crc_rec(
					[pos_a, shp_a[RAD]],
					[pos_b, shp_b]	
				)
				if col then
					trace("Circle and Rect Collision: true")
				else
				
				end
			end
			if col then
				phys[DIR] = dir
				phys[VEL] = 
				phys[RST] = true
			end
		end
	}
end


# Processes Drawing given data.
# Align as Array of Hash POS and DRW
def proc_drawables(drawables)
	drawables.each{
		|drawable|
		pos = drawable[POS]
		draw = drawable[DRW]
		if draw[TYP] == CRC then
			circ(
				pos[0], pos[1],
				draw[RAD], draw[COLO]
			) 
		end
		if draw[TYP] == RCT then
			rect(
				pos[0], pos[1],
				draw[DIM][0], draw[DIM][1], 
				draw[COLO]
			)
		end
	}
end
# <TILES>
# 001:eccccccccc888888caaaaaaaca888888cacccccccacc0ccccacc0ccccacc0ccc
# 002:ccccceee8888cceeaaaa0cee888a0ceeccca0ccc0cca0c0c0cca0c0c0cca0c0c
# 003:eccccccccc888888caaaaaaaca888888cacccccccacccccccacc0ccccacc0ccc
# 004:ccccceee8888cceeaaaa0cee888a0ceeccca0cccccca0c0c0cca0c0c0cca0c0c
# 017:cacccccccaaaaaaacaaacaaacaaaaccccaaaaaaac8888888cc000cccecccccec
# 018:ccca00ccaaaa0ccecaaa0ceeaaaa0ceeaaaa0cee8888ccee000cceeecccceeee
# 019:cacccccccaaaaaaacaaacaaacaaaaccccaaaaaaac8888888cc000cccecccccec
# 020:ccca00ccaaaa0ccecaaa0ceeaaaa0ceeaaaa0cee8888ccee000cceeecccceeee
# </TILES>

# <WAVES>
# 000:00000000ffffffff00000000ffffffff
# 001:0123456789abcdeffedcba9876543210
# 002:0123456789abcdef0123456789abcdef
# </WAVES>

# <SFX>
# 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
# </SFX>

# <TRACKS>
# 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# </TRACKS>

# <SCREEN>
# 095:000000000000000000000000000000000000000111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 096:000000000000000000000000000000000000011111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 097:000000000000000000000000000000000000111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 098:000000000000000000000000000000000001111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 099:000000000000000000000000000000000011111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 100:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 101:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 102:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 103:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 104:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 105:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 106:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 107:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 108:333333333333333333330000000000001111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 109:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 110:333333333333333333330000000000000111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 111:333333333333333333330000000000000011111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 112:333333333333333333330000000000000001111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 113:333333333333333333330000000000000000111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 114:333333333333333333330000000000000000011111111111005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 115:333333333333333333330000000000000000000111111100005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 116:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 117:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 118:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 119:333333333333333333330000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000005555555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
# 120:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 121:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 122:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 123:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 124:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 125:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 126:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 127:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 128:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 129:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 130:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 131:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 132:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 133:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 134:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# 135:333333333333333333332222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
# </SCREEN>

# <PALETTE>
# 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
# </PALETTE>

